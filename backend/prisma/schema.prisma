// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../dist/generated/prisma"
}

// @TODO: make this generator work with imports
// generator zod {
//   provider = "zod-prisma"
//   output   = "../src/generated/zod" // (default) the directory where generated zod schemas will be saved

//   // TODO: make this work .refine(imports.isURL)
//   // imports  = "../zod-schemas"

//   relationModel = true // (default) Create and export both plain and related models.
//   // relationModel         = "default" // Do not export model without relations.
//   // relationModel         = false // Do not generate related model

//   modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//   // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//   modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//   // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//   useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//   // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//   prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
//   // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Survivor {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @unique @default(uuid())

  /// createdAt survivor date at the request time
  /// @zod.custom(z.coerce.date())
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// updatedAt survivor date at the request time
  /// @zod.custom(z.coerce.date())
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// survivor login
  /// @zod.trim().min(1, { message: "Логин должен быть больше 1-го символа" }).max(256, { message: "Логин должен быть меньше 256-и символов" })
  login String @unique

  /// survivor password
  /// @zod.trim().min(8, { message: "Пароль должен быть больше 8-и символов" }).max(64, { message: "Пароль должен быть меньше 64-ех символов" })
  password String

  /// survivor jwt
  /// @zod.trim()
  jwt String? @unique

  points Point[]

  @@unique([login, password])
  @@map("survivors")
}

model Point {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @unique @default(uuid())

  /// createdAt point date at the request time
  /// @zod.custom(z.coerce.date())
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// updatedAt point date at the request time
  /// @zod.custom(z.coerce.date())
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// point value
  /// @zod.int().nonnegative({ message: "Очки должны быть больше или равны нулю" }).max(Number.MAX_VALUE, { message: "Очки не должны привышать максимально возможное число" })
  value Int @default(0)

  /// point roundId
  roundId String @unique
  Round   Round  @relation(fields: [roundId], references: [id])

  /// point survivorId
  survivorId String   @unique
  Survivor   Survivor @relation(fields: [survivorId], references: [id])

  @@unique([roundId, survivorId])
  @@map("points")
}

model Round {
  /// The unique identifier for the record
  /// @default {Generated by database}
  id String @id @unique @default(uuid())

  /// createdAt round date at the request time
  /// @zod.custom(z.coerce.date())
  createdAt DateTime @default(now()) @map(name: "created_at")

  /// updatedAt round date at the request time
  /// @zod.custom(z.coerce.date())
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  /// round start date
  /// @zod.custom(z.coerce.date())
  startAt DateTime @default(now()) @map(name: "start_at")

  /// round end date
  /// @zod.custom(z.coerce.date())
  endAt DateTime @default(now()) @map(name: "end_at")

  points Point[]

  @@map("rounds")
}
